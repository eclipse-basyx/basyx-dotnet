@model ISubmodel
@using BaSyx.API.Http
@using BaSyx.Models.AdminShell;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Security.Cryptography;
@using System.Text;
@using System.Text.RegularExpressions;

@{
    Func<string, string, IProperty, IHtmlContent> ShowPropertyFooter = (submodelId, pathId, property) => new Func<object, Microsoft.AspNetCore.Mvc.Razor.HelperResult>(@<text>@{

            if (string.IsNullOrEmpty(submodelId) || string.IsNullOrEmpty(pathId) || property == null)
            {
                return;
            }
            else
            {
                string requestPath = GetRequestPath(submodelId, pathId);
                string inputId = GetHashString(requestPath + ";Input");
                string retrieveButtonId = GetHashString(requestPath + ";Retrieve");
                string updateButtonId = GetHashString(requestPath + ";Update");
                string clearButtonId = GetHashString(requestPath + ";Clear");
                string autoReloadCheckboxId = GetHashString(requestPath + ";AutoReload");
                <div class="card-footer">
                    <div class="row align-items-center">
                        <div class="col-sm-8">
                            <input id="@inputId" type="text" class="form-control" placeholder="Value" value="@await Html.PartialAsync("_Value", property)" />
                        </div>
                        <div class="col-sm-4">
                            <div class="row">
                                <button onclick="@("GetPropertyValue('" + requestPath + "', '" + @inputId + "')")" id="@retrieveButtonId" type="button" class="btn btn-outline-success">Read</button>
                                <button onclick="@("SetPropertyValue('" + requestPath + "', '" + @inputId + "', $('#" + @inputId + "').val(), '" + property.ValueType?.ToString() + "')")" id="@updateButtonId" type="button" class="btn btn-outline-danger" style="margin-left: 5px;">Write</button>
                                <button onclick="@("$('#" + @inputId + "').val('')")" id="@clearButtonId" type="button" class="btn btn-outline-primary" style="margin-left: 5px;">Clear</button>
                                <div style="margin-top: 4px; margin-left: 5px;">
                                    <input data-toggle="toggle" data-on="AutoReload" data-off="AutoReload" data-size="sm" data-width="100" data-onstyle="dark" type="checkbox" id="@autoReloadCheckboxId" onchange="@("ToggleAutoReload('" + autoReloadCheckboxId + "', '" + retrieveButtonId + "')")">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
    }</text>)(null);

Func<List<object>, IHtmlContent> ShowSubmodelElement = null;

ShowSubmodelElement = @<text>@{
        string submodelId = item[0] as string;
        IElementContainer<ISubmodelElement> submodelElementContainer = item[1] as IElementContainer<ISubmodelElement>;

        string sePathId = submodelElementContainer.Path;
        string requestPath = GetRequestPath(submodelId, sePathId);
        string hashedRequestPath = GetHashString(requestPath);

        ISubmodelElement submodelElement = submodelElementContainer.Value;

        <div class="card border-dark mb-3">
            <div class="card-header">
                <h5>
                    <a data-toggle="collapse" href="#@hashedRequestPath">@submodelElementContainer.IdShort</a>
                </h5>
            </div>
            <div id="@hashedRequestPath" class="collapse">
                <ul class="list-group list-group-flush">
                    @await Html.PartialAsync("_DataSpecification", submodelElement.EmbeddedDataSpecifications)
                    @await Html.PartialAsync("_Description", submodelElement.Description)
                    @await Html.PartialAsync("_SemanticId", submodelElement.SemanticId)
                    @await Html.PartialAsync("_ModelElementSpecific", submodelElement)
                </ul>
                @if (submodelElement is IProperty property)
                {
                    @ShowPropertyFooter(submodelId, sePathId, property)
                }
                else if (submodelElement is IOperation operation)
                {
                    if (operation.InputVariables?.Count > 0)
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var argument in operation.InputVariables.ToElementContainer())
                            {
                                <li class="list-group-item bg-light">
                                    <div class="row align-items-center">
                                        <div class="col-sm-2 argInName @hashedRequestPath"><b>@argument.IdShort</b></div>
                                        <div class="col-sm-2 argInType @hashedRequestPath">@GetValueOrModelType(argument)</div>
                                        <div class="col-sm-8">
                                            <input id="msg" type="text" class="form-control argInValue @hashedRequestPath" name="msg" placeholder="Input Argument Value">
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    if (operation.OutputVariables?.Count > 0)
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var argument in operation.OutputVariables.ToElementContainer())
                            {
                                <li class="list-group-item bg-light">
                                    <div class="row align-items-center">
                                        <div class="col-sm-2 argOutName @hashedRequestPath"><b>@argument.IdShort</b></div>
                                        <div class="col-sm-2 argOutType @hashedRequestPath">@GetValueOrModelType(argument)</div>
                                        <div class="col-sm-8">
                                            <input id="argOutValue_@hashedRequestPath@argument.IdShort" type="text" class="form-control argOutValue @hashedRequestPath" name="msg" placeholder="Output Argument Value">
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    }

                    <div class="card-footer">
                        <button id="buttonExecute_@hashedRequestPath" onclick="@("ExecuteOperation('" + requestPath +"', '" + hashedRequestPath + "')")" type="button" class="btn btn-success">
                            <span id="executeIcon_@hashedRequestPath" role="status" aria-hidden="true"></span>
                            Execute
                        </button>
                        @if (operation.InputVariables?.Count > 0 || operation.OutputVariables?.Count > 0)
                        {
                            <button onclick="@("ClearFields('" + hashedRequestPath + "')")" type="button" class="btn btn-outline-primary">Clear</button>
                        }
                        <input id="messageInput_@hashedRequestPath" type="text" class="form-control" name="opResultMsgs" style="margin-top:5px" placeholder="Operation Result Messages" disabled>
                    </div>
                }
                else if (submodelElementContainer.HasChildren())
                {
                    <div class="card-body">
                        @foreach (var valueChild in submodelElementContainer.Children)
                        {
                            @ShowSubmodelElement(new List<object>() { submodelId, valueChild })
                        }
                    </div>
                }
                else if (submodelElement is IBasicEventElement eventElement && eventElement.SubmodelElements.HasChildren())
                {
                    <div class="card-body">
                        @foreach (var valueChild in eventElement.SubmodelElements.Children)
                        {
                            @ShowSubmodelElement(new List<object>() { submodelId, valueChild })
                        }
                    </div>
                }
            </div>
        </div>
}</text>;
}

@if (Model != null)
{
    ISubmodel submodel = Model;
    string hashedSubmodelId = GetHashString(submodel.Identification.Id);
    <div class="card border-success mb-3">
        <div class="card-header bg-success">
            <h4>
                <a class="text-white" data-toggle="collapse" href="#@hashedSubmodelId">@submodel.IdShort</a>
            </h4>
        </div>
        <div id="@hashedSubmodelId" class="collapse">
            <ul class="list-group list-group-flush">
                @await Html.PartialAsync("_IdShort", submodel.IdShort)
                @await Html.PartialAsync("_Identifier", submodel.Identification)
                @await Html.PartialAsync("_Description", submodel.Description)
                @await Html.PartialAsync("_SemanticId", submodel.SemanticId)
            </ul>
            <div class="card-body">
                @if (submodel.SubmodelElements.Count() > 0)
                {
                    <div class="card border-info mb-3">
                        <div class="card-header" style="background:#005691"><h4 class="text-white">Submodel-Elements</h4></div>
                        <div class="card-body">
                            @foreach (var submodelElement in submodel.SubmodelElements.Children)
                            {
                                if (submodelElement == null)
                                { continue; }

                                @ShowSubmodelElement(new List<object>() { submodel.Identification.Id, submodelElement });
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@functions
    {

    public string GetRequestPath(string submodelId, string pathId)
    {
        string aasId = (string)ViewData["aasId"];

        if (!string.IsNullOrEmpty(aasId))
        {
            aasId = Base64UrlEncode(aasId);
        }

        if (!string.IsNullOrEmpty(submodelId))
        {
            submodelId = Base64UrlEncode(submodelId);
        }

        string apiType = (string)ViewData["ApiType"];
        string pathBase = (string)ViewData["PathBase"];
        string requestPath = pathBase;
        if (apiType == "AssetAdministrationShell")
        {
            requestPath += AssetAdministrationShellRoutes.AAS_SUBMODELS_BYID.Replace("{submodelIdentifier}", submodelId) + SubmodelRoutes.SUBMODEL_ELEMENTS_IDSHORTPATH.Replace("{idShortPath}", pathId);
        }
        else if (apiType == "Submodel")
        {
            requestPath += SubmodelRoutes.SUBMODEL_ELEMENTS_IDSHORTPATH.Replace("{idShortPath}", pathId);
        }
        else if (apiType == "AssetAdministrationShellRepository")
        {
            requestPath += AssetAdministrationShellRepositoryRoutes.SHELLS_AAS.Replace("{aasIdentifier}", aasId) + AssetAdministrationShellRoutes.AAS_SUBMODELS_BYID.Replace("{submodelIdentifier}", submodelId) + SubmodelRoutes.SUBMODEL_ELEMENTS_IDSHORTPATH.Replace("{idShortPath}", pathId);
        }
        else if (apiType == "SubmodelRepository")
        {
            requestPath += SubmodelRepositoryRoutes.SUBMODEL_BYID.Replace("{submodelIdentifier}", submodelId) + SubmodelRoutes.SUBMODEL_ELEMENTS_IDSHORTPATH.Replace("{idShortPath}", pathId);
        }
        return requestPath;
    }

    public static string Base64UrlEncode(string toEncode)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(toEncode);
        string encoded = Base64UrlTextEncoder.Encode(bytes);
        return encoded;
    }

    public string GetValueOrModelType(ISubmodelElement submodelElement)
    {
        if (submodelElement is IProperty property)
        {
            return property.ValueType?.ToString();
        }
        else
        {
            return submodelElement.ModelType.Name;
        }
    }

    private static string GetHashString(string input)
    {
        SHA256 shaAlgorithm = SHA256.Create();
        byte[] data = Encoding.UTF8.GetBytes(input);

        byte[] bHash = shaAlgorithm.ComputeHash(data);

        string hashString = string.Empty;
        for (int i = 0; i < bHash.Length; i++)
        {
            hashString += bHash[i].ToString("x2");
        }
        var output = Regex.Replace(hashString, @"[\d-]", string.Empty);
        return output;
    }
}